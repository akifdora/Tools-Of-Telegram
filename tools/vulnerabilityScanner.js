const https = require('https');
const http = require('http');

function handleVulnerabilityScanner(bot, chatId) {
    bot.sendMessage(chatId, "💭 Güvenlik açıklarını taramak istediğiniz web sitesini yazın:");

    bot.once('message', (msg) => {
        let url = msg.text.trim();

        if (!/^https?:\/\//i.test(url)) {
            url = "http://" + url;
        }

        bot.sendMessage(chatId, `🔍 ${url} üzerinde güvenlik açıkları taranıyor...`);

        scanVulnerabilities(url).then(results => {
            let resultMessage = "🌐 *Domain:* `" + url + "`\n";
            results.forEach(result => {
                resultMessage += `• *${result.testName}:* ${result.status}\n`;
            });
            bot.sendMessage(chatId, resultMessage, { parse_mode: 'Markdown' });
        }).catch(err => {
            bot.sendMessage(chatId, `❌ *HATA:* ${err.message}`, { parse_mode: 'Markdown' });
        });
    });
}

function scanVulnerabilities(url) {
    return new Promise((resolve, reject) => {
        let results = [];

        // SQL Injection Test
        const sqlInjectionTest = url + "?id=1' OR '1'='1";
        testUrl(sqlInjectionTest).then(sqlResponse => {
            results.push({
                testName: "SQL Injection",
                status: (sqlResponse && sqlResponse.includes('error')) ? "Bulundu ❌" : "Bulunamadı ✅"
            });

            // XSS Test
            const xssTest = url + "?search=<script>alert('XSS')</script>";
            return testUrl(xssTest);
        }).then(xssResponse => {
            results.push({
                testName: "XSS",
                status: (xssResponse && xssResponse.includes('<script>alert')) ? "Bulundu ❌" : "Bulunamadı ✅"
            });

            // Directory Traversal Test
            const dirTraversalTest = url + "/../../../../etc/passwd";
            return testUrl(dirTraversalTest);
        }).then(dirResponse => {
            results.push({
                testName: "Directory Traversal",
                status: (dirResponse && dirResponse.includes('root:x:0:0')) ? "Bulundu ❌" : "Bulunamadı ✅"
            });

            // HTTPS Test
            const httpsTestUrl = url.replace("http://", "https://");
            return checkHttps(httpsTestUrl);
        }).then(httpsHeaders => {
            results.push({
                testName: "HTTPS Güvenliği",
                status: (httpsHeaders && httpsHeaders[0].includes('200')) ? "Aktif ✅" : "Aktif Değil ❌"
            });

            // Security Headers Test
            return getHeaders(url);
        }).then(securityHeadersTest => {
            const securityHeaders = ['Content-Security-Policy', 'X-Content-Type-Options', 'X-Frame-Options', 'Strict-Transport-Security'];
            securityHeaders.forEach(header => {
                const headerValue = securityHeadersTest[header] ? securityHeadersTest[header] : 'Eksik ⚠️';
                results.push({ testName: header, status: headerValue });
            });

            // Clickjacking Test
            return testClickjacking(url);
        }).then(clickjackingResponse => {
            results.push({
                testName: "Clickjacking",
                status: (clickjackingResponse !== false) ? "Bulunamadı ✅" : "Bulundu ❌"
            });

            resolve(results);
        }).catch(err => {
            reject(err);
        });
    });
}

function testUrl(testUrl) {
    return new Promise((resolve, reject) => {
        let client = testUrl.startsWith('https') ? https : http;
        client.get(testUrl, (res) => {
            let data = '';
            res.on('data', (chunk) => data += chunk);
            res.on('end', () => resolve(data));
        }).on('error', (err) => resolve(null));
    });
}

function checkHttps(httpsTestUrl) {
    return new Promise((resolve, reject) => {
        let client = httpsTestUrl.startsWith('https') ? https : http;
        client.get(httpsTestUrl, (res) => {
            resolve(res.rawHeaders);
        }).on('error', (err) => resolve(null));
    });
}

function getHeaders(url) {
    return new Promise((resolve, reject) => {
        let client = url.startsWith('https') ? https : http;
        client.get(url, (res) => {
            resolve(res.headers);
        }).on('error', (err) => resolve({}));
    });
}

function testClickjacking(url) {
    return new Promise((resolve, reject) => {
        let client = url.startsWith('https') ? https : http;
        client.get(url, (res) => {
            resolve(res.statusCode !== 403);
        }).on('error', () => resolve(false));
    });
}

module.exports = { handleVulnerabilityScanner };
